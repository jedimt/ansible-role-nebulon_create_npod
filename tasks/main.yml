---
# tasks file for jedimt.nebulon_create_npod

- name: Get nPod group UUID
  nebulon.nebulon_on.neb_npod_group_info:
    neb_username: "{{ vault_neb_username }}"
    neb_password: "{{ vault_neb_password }}"
    name: "{{ npod_group }}"
  register: npod_group_name
  tags:
    - npod_group

- name: Get nPod template UUID
  nebulon.nebulon_on.neb_npod_template_info:
    neb_username: "{{ vault_neb_username }}"
    neb_password: "{{ vault_neb_password }}"
    name: "{{ npod_template }}"
  register: npod_template_name
  tags:
    - npod_template

- name: Set facts
  ansible.builtin.set_fact:
    npod_group_uuid: "{{ npod_group_name.npod_groups[0].uuid }}"
    npod_template_uuid: "{{ npod_template_name.npod_templates[-1].uuid }}"
  tags:
    - npod_template

- name: Look up SPU serial and IP information
  ansible.builtin.set_fact:
    spus: "{{ lookup('nebulon.nebulon_on.neb_spu_lookup', 'servers') }}"

- name: Extract SPU serials
  ansible.builtin.set_fact:
    spu_serials: "{{ spus | map(attribute='spu_serial') | list }}"

- name: Verify SPUs not part of any existing nPod
  nebulon.nebulon_on.neb_spu_info:
    neb_username: "{{ vault_neb_username }}"
    neb_password: "{{ vault_neb_password }}"
    spu_serials: "{{ spu_serials }}"
    not_in_npod: true
  register: npod_spus

# Disable linting due to warning that cannot be bypassed
- name: Create nPod # noqa: args[module]
  nebulon.nebulon_on.neb_npod:
    neb_username: "{{ vault_neb_username }}"
    neb_password: "{{ vault_neb_password }}"
    name: "{{ npod_name }}"
    npod_group_uuid: "{{ npod_group_uuid }}"
    spus: "{{ spus }}"
    npod_template_uuid: "{{ npod_template_uuid }}"
    note: "{{ npod_note }}"
    timezone: "{{ timezone }}"
    ignore_warnings: true
    state: "{{ npod_state }}"
  register: npod_data
  when: npod_spus.spus[0].serial is defined

- name: Mark if reboot is needed
  ansible.builtin.set_fact:
    reboot_required: "{{ npod_data.changed }}"
